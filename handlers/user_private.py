from aiogram import types, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from services.crypto import (
    get_crypto_price,
    generate_price_chart,
    get_token_description
)
from services.calculator import calculate_position

user_private_router = Router()

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –º–µ–Ω—é
popular_tokens = {
    'BTC': 'bitcoin',
    'ETH': 'ethereum',
    'SOL': 'solana',
    'BNB': 'binancecoin',
    'DOGE': 'dogecoin'
}


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç. –í–≤–µ–¥–∏ /menu —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é.")


@user_private_router.message(Command("menu"))
async def menu_cmd(message: types.Message):
    await message.answer(
        "üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:\n"
        "/crypto [—Ç–æ–∫–µ–Ω] ‚Äî –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "/calc <—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞> <–ø–ª–µ—á–æ> <–±–∞–ª–∞–Ω—Å> ‚Äî –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏\n"
        "/chart ‚Äî –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞\n"
        "/help ‚Äî –ü–æ–º–æ—â—å"
    )


@user_private_router.message(Command("crypto"))
async def crypto_cmd(message: types.Message):
    try:
        parts = message.text.split()
        tokens = [t.lower() for t in parts[1:]] if len(parts) > 1 else ['bitcoin', 'ethereum', 'tether']
        prices = get_crypto_price(symbols=tokens)
        await message.answer(f"üí± –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:\n{prices}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")


@user_private_router.message(Command("calc"))
async def calc_cmd(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /calc <—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞> <–ø–ª–µ—á–æ> <–±–∞–ª–∞–Ω—Å>")

        entry = float(parts[1])
        leverage = float(parts[2])
        balance = float(parts[3])

        result = calculate_position(entry, leverage, balance)
        await message.answer(
            f"üìà –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {result['position_size']}\n"
            f"‚ö†Ô∏è –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è: {result['liquidation_price']:.2f}"
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@user_private_router.message(Command("chart"))
async def chart_menu(message: types.Message):
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"chart_{token}")]
        for name, token in popular_tokens.items()
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=keyboard)


@user_private_router.callback_query(lambda c: c.data.startswith("chart_"))
async def send_chart(callback: CallbackQuery):
    token = callback.data.split("_", 1)[1]
    try:
        chart_buf = generate_price_chart(token)
        description = get_token_description(token, lang='ru')

        await callback.message.answer_photo(photo=chart_buf, caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ {token.title()} –∑–∞ 7 –¥–Ω–µ–π")
        await callback.message.answer(f"üßæ –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}")
        await callback.answer()
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")


@user_private_router.message()
async def echo_handler(message: types.Message):
    text = message.text.lower()

    if text in ['–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç–∏–∫', 'hello', 'hi', '—Ö—ç–ª–æ—É']:
        await message.answer('–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!')
    elif text in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'bye', '–ø–∞–∫–µ–¥–∞']:
        await message.answer('–ò —Ç–µ–±–µ –ø–æ–∫–∞!')
    else:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")