import os
import asyncio
import requests
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BufferedInputFile

from dotenv import load_dotenv, find_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv(find_dotenv())
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
popular_tokens = {
    'BTC': 'bitcoin',
    'ETH': 'ethereum',
    'SOL': 'solana',
    'BNB': 'binancecoin',
    'DOGE': 'dogecoin'
}

faq_data = {
    "q1": {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞?",
        "answer": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Äî —ç—Ç–æ —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã, –Ω–µ –∏–º–µ—é—â–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è –∏ –µ–¥–∏–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã –µ–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞–ª. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º–æ–º ¬´–±–ª–æ–∫—á–µ–π–Ω–µ¬ª –∏–ª–∏ —Ü–µ–ø–æ—á–∫–µ –±–ª–æ–∫–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
    },
    "q2": {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –±–ª–æ–∫—á–µ–π–Ω?",
        "answer": "–ë–ª–æ–∫—á–µ–π–Ω (–æ—Ç –∞–Ω–≥–ª. block ‚Äî ¬´–±–ª–æ–∫, –º–æ–¥—É–ª—å¬ª –∏ chain ‚Äî ¬´—Ü–µ–ø–æ—á–∫–∞¬ª) ‚Äî —ç—Ç–æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –±–ª–æ–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏. –ö–∞–∂–¥—ã–π –∏–∑ –±–ª–æ–∫–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ –∞–∫—Ç–∏–≤–∞."
    },
    "q3": {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞–π–Ω–∏–Ω–≥?",
        "answer": "–ú–∞–π–Ω–∏–Ω–≥ ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±—ã—á–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –ø–æ–º–æ—â—å—é –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Ä–µ—à–∞—é—â–∏—Ö –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ú–∞–π–Ω–µ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –≤ –±–ª–æ–∫—á–µ–π–Ω, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏."
    },
    "q4": {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–æ–∫–µ–Ω—ã –∏ –∏—Ö —Ç–∏–ø—ã?",
        "answer": "–¢–æ–∫–µ–Ω ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–ª–æ–∫—á–µ–π–Ω–∞. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∫–æ–∏–Ω–∞, —Ç–æ–∫–µ–Ω –Ω–µ –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞. –¢–∏–ø—ã —Ç–æ–∫–µ–Ω–æ–≤: –∞–ª—å—Ç–∫–æ–∏–Ω, —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω, —Ç–æ–∫–µ–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–µ–≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã–π —Ç–æ–∫–µ–Ω (NFT)."
    }
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def get_crypto_price(symbols=('bitcoin', 'ethereum', 'tether'), currency='usd'):
    url = "https://api.coingecko.com/api/v3/simple/price"
    response = requests.get(url, params={'ids': ','.join(symbols), 'vs_currencies': currency})
    data = response.json()

    result = []
    for symbol in symbols:
        price = data.get(symbol, {}).get(currency)
        if price:
            result.append(f"{symbol.upper()}: {price} {currency.upper()}")
    return '\n'.join(result)

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
def calculate_position(entry_price: float, leverage: float, balance: float):
    position_size = balance * leverage
    liquidation_price = entry_price - (entry_price * (1 / leverage)) if leverage != 0 else 0
    return {
        "position_size": position_size,
        "liquidation_price": liquidation_price
    }

# –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã –∏ –≥—Ä–∞—Ñ–∏–∫
def get_price_history(symbol='bitcoin', currency='usd', days=7):
    url = f'https://api.coingecko.com/api/v3/coins/{symbol}/market_chart'
    params = {'vs_currency': currency, 'days': days}
    res = requests.get(url, params=params)
    res.raise_for_status()
    data = res.json()
    return [(x[0], x[1]) for x in data['prices']]

def generate_price_chart(symbol='bitcoin', currency='usd'):
    history = get_price_history(symbol, currency)
    timestamps = [datetime.fromtimestamp(ts / 1000).strftime('%b %d') for ts, _ in history]
    prices = [price for _, price in history]

    plt.figure(figsize=(8, 4))
    plt.plot(timestamps, prices, label=f"{symbol.upper()}", color='blue')
    plt.xticks(rotation=45)
    plt.title(f"{symbol.upper()} –¶–µ–Ω–∞ –∑–∞ 7 –¥–Ω–µ–π")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel(f"–¶–µ–Ω–∞ –≤ {currency.upper()}")
    plt.tight_layout()
    plt.grid(True)
    plt.legend()

    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def get_token_description(symbol='bitcoin', lang='ru'):
    url = f"https://api.coingecko.com/api/v3/coins/{symbol}"
    res = requests.get(url, params={"localization": "true"})
    res.raise_for_status()
    data = res.json()

    desc = data.get("description", {}).get(lang) or data.get("description", {}).get("en", "")
    return desc.strip()[:1000] + "..." if desc else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

# –•–µ–Ω–¥–ª–µ—Ä—ã

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="open_menu")]
        ]
    )
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç. –ü–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã, –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
        reply_markup=keyboard
    )

@dp.message(Command("menu"))
async def menu_cmd(message: types.Message):
    await message.answer(
        "üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:\n"
        "/crypto ‚Äî –∫—É—Ä—Å—ã —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n"
        "/calc <—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞> <–ø–ª–µ—á–æ> <–±–∞–ª–∞–Ω—Å> ‚Äî –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏.\n"
        "/chart ‚Äî –≤—ã–±–æ—Ä –∫–æ–∏–Ω–∞ –∏ –µ–≥–æ –≥—Ä–∞—Ñ–∏–∫.\n"
        "/faq ‚Äî —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö.\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

@dp.message(Command("crypto"))
async def crypto_cmd(message: types.Message):
    try:
        parts = message.text.split()
        tokens = [t.lower() for t in parts[1:]] if len(parts) > 1 else ['bitcoin', 'ethereum', 'tether']
        prices = get_crypto_price(tokens)
        await message.answer(f"üí± –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:\n{prices}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command("calc"))
async def calc_cmd(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) != 4:
            raise ValueError("–ò—Å–ø–æ–ª—å–∑—É–π: /calc <–≤—Ö–æ–¥> <–ø–ª–µ—á–æ> <–±–∞–ª–∞–Ω—Å>")
        entry = float(parts[1])
        leverage = float(parts[2])
        balance = float(parts[3])
        result = calculate_position(entry, leverage, balance)
        await message.answer(
            f"üìà –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {result['position_size']}\n"
            f"‚ö†Ô∏è –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è: {result['liquidation_price']:.2f}"
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command("faq"))
async def faq_cmd(message: types.Message):
    buttons = [
        [InlineKeyboardButton(text=faq_data[qid]["question"], callback_data=f"faq_{qid}")]
        for qid in faq_data
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("faq_"))
async def answer_faq(callback: CallbackQuery):
    qid = callback.data.split("_", 1)[1]
    faq = faq_data.get(qid)
    if faq:
        await callback.message.answer(f"üìå *{faq['question']}*\n\n{faq['answer']}", parse_mode="Markdown")
    else:
        await callback.message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="open_menu")]
        ]
    )

    await message.answer(
        "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n"
        "–Ø ‚Äî –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç, –ø–æ–º–æ–≥–∞—é —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫—É—Ä—Å–∞–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏.\n\n"
        "üöÄ <b>–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –±–æ—Ç?</b>\n"
        "- –ë—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC, ETH, SOL –∏ –¥—Ä.\n"
        "- –ü–æ—Å—Ç—Ä–æ–∏—Ç—å 7-–¥–Ω–µ–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã.\n"
        "- –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–Ω—É –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —Å –ª—é–±—ã–º –ø–ª–µ—á–æ–º.\n\n"
        "üßÆ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç /calc?</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/calc &lt;—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞&gt; &lt;–ø–ª–µ—á–æ&gt; &lt;–±–∞–ª–∞–Ω—Å&gt;</code>:\n"
        "‚Ä¢ <b>—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞</b> ‚Äî —Ü–µ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –≤–æ—à–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20000)\n"
        "‚Ä¢ <b>–ø–ª–µ—á–æ</b> ‚Äî –∂–µ–ª–∞–µ–º–æ–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)\n"
        "‚Ä¢ <b>–±–∞–ª–∞–Ω—Å</b> ‚Äî –≤–∞—à –¥–µ–ø–æ–∑–∏—Ç –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100)\n"
        "–ë–æ—Ç –≤–µ—Ä–Ω—ë—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–Ω—É –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏.",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "open_menu")
async def open_menu_callback(callback: CallbackQuery):
    await menu_cmd(callback.message)
    await callback.answer()

@dp.message(Command("chart"))
async def chart_menu(message: types.Message):
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"chart_{token}")]
        for name, token in popular_tokens.items()
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("chart_"))
async def send_chart(callback: CallbackQuery):
    token = callback.data.split("_", 1)[1]
    try:
        chart_buf = generate_price_chart(token)
        desc = get_token_description(token)

        photo = BufferedInputFile(chart_buf.read(), filename=f"{token}.png")
        await callback.message.answer_photo(photo=photo, caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ {token.upper()} –∑–∞ 7 –¥–Ω–µ–π")
        await callback.message.answer(f"üßæ –û–ø–∏—Å–∞–Ω–∏–µ:\n{desc}")
        await callback.answer()
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

@dp.message()
async def echo_handler(message: types.Message):
    text = message.text.lower()
    if text in ['–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç–∏–∫', 'hello', 'hi', '—Ö—ç–ª–æ—É']:
        await message.answer("–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!")
    elif text in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'bye', '–ø–∞–∫–µ–¥–∞']:
        await message.answer("–î–æ –≤—Å—Ç—Ä–µ—á–∏!")
    else:
        await message.answer("–ù–µ –ø–æ–Ω—è–ª üòÖ –ù–∞–ø–∏—à–∏ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
